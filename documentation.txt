Currently I am programming this using only javascript without any regex and upholding the RFC standard

I have implemented all features of the verification of the email address based on the RFC
    NOTE: Javascript does not have any internal libraries or tools to speed the process up however regex could possibly be used



I have also run into an issue when multiple @ are stuck between qoutes and backslash in the local part
    - since I am checking a split between the local and domain based on the @, I need to find a way to test that


RFC Provided Below:

3.  Restrictions on email addresses

   Reference documents: RFC 2821 [RFC2821] and RFC 2822 [RFC2822]

   Contemporary email addresses consist of a "local part" separated from
   a "domain part" (a fully-qualified domain name) by an at-sign ("@").
   The syntax of the domain part corresponds to that in the previous
   section.  The concerns identified in that section about filtering and
   lists of names apply to the domain names used in an email context as
   well.  The domain name can also be replaced by an IP address in
   square brackets, but that form is strongly discouraged except for
   testing and troubleshooting purposes.

   The local part may appear using the quoting conventions described
   below.  The quoted forms are rarely used in practice, but are
   required for some legitimate purposes.  Hence, they should not be
   rejected in filtering routines but, should instead be passed to the
   email system for evaluation by the destination host.




Klensin                      Informational                      [Page 5]


RFC 3696          Checking and Transformation of Names     February 2004


   The exact rule is that any ASCII character, including control
   characters, may appear quoted, or in a quoted string.  When quoting
   is needed, the backslash character is used to quote the following
   character.  For example

      Abc\@def@example.com

   is a valid form of an email address.  Blank spaces may also appear,
   as in

      Fred\ Bloggs@example.com

   The backslash character may also be used to quote itself, e.g.,

      Joe.\\Blow@example.com

   In addition to quoting using the backslash character, conventional
   double-quote characters may be used to surround strings.  For example

      "Abc@def"@example.com

      "Fred Bloggs"@example.com

   are alternate forms of the first two examples above.  These quoted
   forms are rarely recommended, and are uncommon in practice, but, as
   discussed above, must be supported by applications that are
   processing email addresses.  In particular, the quoted forms often
   appear in the context of addresses associated with transitions from
   other systems and contexts; those transitional requirements do still
   arise and, since a system that accepts a user-provided email address
   cannot "know" whether that address is associated with a legacy
   system, the address forms must be accepted and passed into the email
   environment.

   Without quotes, local-parts may consist of any combination of
   alphabetic characters, digits, or any of the special characters

      ! # $ % & ' * + - / = ?  ^ _ ` . { | } ~

   period (".") may also appear, but may not be used to start or end the
   local part, nor may two or more consecutive periods appear.  Stated
   differently, any ASCII graphic (printing) character other than the
   at-sign ("@"), backslash, double quote, comma, or square brackets may
   appear without quoting.  If any of that list of excluded characters
   are to appear, they must be quoted.  Forms such as

      user+mailbox@example.com




Klensin                      Informational                      [Page 6]


RFC 3696          Checking and Transformation of Names     February 2004


      customer/department=shipping@example.com

      $A12345@example.com

      !def!xyz%abc@example.com

      _somename@example.com

   are valid and are seen fairly regularly, but any of the characters
   listed above are permitted.  In the context of local parts,
   apostrophe ("'") and acute accent ("`") are ordinary characters, not
   quoting characters.  Some of the characters listed above are used in
   conventions about routing or other types of special handling by some
   receiving hosts.  But, since there is no way to know whether the
   remote host is using those conventions or just treating these
   characters as normal text, sending programs (and programs evaluating
   address validity) must simply accept the strings and pass them on.

   In addition to restrictions on syntax, there is a length limit on
   email addresses.  That limit is a maximum of 64 characters (octets)
   in the "local part" (before the "@") and a maximum of 255 characters
   (octets) in the domain part (after the "@") for a total length of 320
   characters.  Systems that handle email should be prepared to process
   addresses which are that long, even though they are rarely
   encountered.